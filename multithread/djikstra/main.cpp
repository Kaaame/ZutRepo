#include <limits.h>
#include <cstring>
#include <set>
#include <vector>
#include <cstdio>

const int height = 37;
const int width = 25;

#define TWO_TO_SINGLE(x,y) ((x) * height + (y))


const int starting_height = 1;
const int starting_width = 1;

const int ending_height = 8;//35;
const int ending_width = 1;//23;

using namespace std;

vector <pair<int, int>> v[height][width];
vector <pair<int, int>> path[height][width];
int dist[height][width] = {};
bool visited[height][width] = {};

void solve();
void print_map();
void print_path();

int labirynth[height][width] =
{
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
    {2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647},
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
    {2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647},
    {2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 1, 2147483647, 2147483647, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647, 1, 2147483647},
    {2147483647, 1, 2147483647, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2147483647, 1, 1, 1, 2147483647, 1, 2147483647},
    {2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647, 2147483647}
};



int main()
{
    for (int i = 0; i < height; i++)
	{
		// printf("{");
		for (int j = 0; j < width; j++)
		{
            dist[i][j] = INT_MAX;
        }
    }

    solve();
    print_map();
    print_path();
}

void solve()
{
    multiset<pair<int, int>> s;
    s.insert({1, TWO_TO_SINGLE(starting_height, starting_width)});

    dist[starting_height][starting_width] = 0;

    while(!s.empty())
    {
        pair<int, int> p = *s.begin();
        s.erase(s.begin());

        // int weight = p.first;
        int h = p.second;
        int w = p.second % height;
        h /=  height;
        path[h][w].push_back({h,w});
        if(h == ending_height && w == ending_width) break;//found exit

        if(visited[h][w]) continue;

        visited[h][w] = true;

        for(int i = -1; i <= 1; i++)
        {
            for(int j = -1; j <= 1; j++)
            {
                // printf("h = %d, w = %d\t", h, w);
                // printf("%d, %d\n", h + i, w + j);
                
                if (i == 0 && j == 0) continue;
                int weight = labirynth[h + i][w + j];

                if((dist[h][w] + weight) < dist[h + i][w + j] && weight != INT_MAX)
                {
                    path[h + i][w + j] = path[h][w]; 
                    dist[h + i][w + j] = dist[h][w] + weight;

                    s.insert({dist[h + i][w + j], TWO_TO_SINGLE((h + i), (w + j))});
                }
            }
        }
    }

}
void print_map()
{
	// printf("{");
	for (int i = 0; i < height; i++)
	{
		// printf("{");
		for (int j = 0; j < width; j++)
		{
            if(dist[i][j] == INT_MAX)
                printf("0");
            else
                printf("*");
		}
		printf("\n");
	}
	// printf("};");
}

void print_path()
{
    for(size_t i = 0; i < path[ending_height][ending_width].size(); i++)
    printf("{%d, %d}\n", path[ending_height][ending_width][i].first, path[ending_height][ending_width][i].second);
}